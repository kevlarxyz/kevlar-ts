/* tslint:disable */
/* eslint-disable */
/**
 * Vault Ethereum Plugin
 * This is a Vault plugin that allows for the creation of Ethereum accounts and signing of transactions using those accounts. Contact Support:  Name: @kevlarxyz  Email: support@kevlar.xyz
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface Erc721balanceofRequest {
    accountName: any;
    accept: any;
}

export interface Geterc20balanceRequest {
    accountName: any;
    accept: any;
}

/**
 * 
 */
export class BalanceOfApi extends runtime.BaseAPI {

    /**
     * erc721 balance of
     */
    async erc721balanceofRaw(requestParameters: Erc721balanceofRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountName === null || requestParameters.accountName === undefined) {
            throw new runtime.RequiredError('accountName','Required parameter requestParameters.accountName was null or undefined when calling erc721balanceof.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling erc721balanceof.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        const response = await this.request({
            path: `/accounts/{account-name}/erc721/balanceOf`.replace(`{${"account-name"}}`, encodeURIComponent(String(requestParameters.accountName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * erc721 balance of
     */
    async erc721balanceof(requestParameters: Erc721balanceofRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.erc721balanceofRaw(requestParameters, initOverrides);
    }

    /**
     * get erc20 balance
     */
    async geterc20balanceRaw(requestParameters: Geterc20balanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountName === null || requestParameters.accountName === undefined) {
            throw new runtime.RequiredError('accountName','Required parameter requestParameters.accountName was null or undefined when calling geterc20balance.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling geterc20balance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        const response = await this.request({
            path: `/accounts/{account-name}/erc20/balanceOf`.replace(`{${"account-name"}}`, encodeURIComponent(String(requestParameters.accountName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * get erc20 balance
     */
    async geterc20balance(requestParameters: Geterc20balanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.geterc20balanceRaw(requestParameters, initOverrides);
    }

}
