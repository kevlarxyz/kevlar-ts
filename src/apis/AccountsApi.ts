/* tslint:disable */
/* eslint-disable */
/**
 * Vault Ethereum Plugin
 * This is a Vault plugin that allows for the creation of Ethereum accounts and signing of transactions using those accounts. Contact Support:  Name: @kevlarxyz  Email: support@kevlar.xyz
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface ListallaccountsRequest {
    accept: any;
    xVAULTREQUEST: any;
    xVAULTTOKEN: any;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * list all accounts
     */
    async listallaccountsRaw(requestParameters: ListallaccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling listallaccounts.');
        }

        if (requestParameters.xVAULTREQUEST === null || requestParameters.xVAULTREQUEST === undefined) {
            throw new runtime.RequiredError('xVAULTREQUEST','Required parameter requestParameters.xVAULTREQUEST was null or undefined when calling listallaccounts.');
        }

        if (requestParameters.xVAULTTOKEN === null || requestParameters.xVAULTTOKEN === undefined) {
            throw new runtime.RequiredError('xVAULTTOKEN','Required parameter requestParameters.xVAULTTOKEN was null or undefined when calling listallaccounts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.xVAULTREQUEST !== undefined && requestParameters.xVAULTREQUEST !== null) {
            headerParameters['X-VAULT_REQUEST'] = String(requestParameters.xVAULTREQUEST);
        }

        if (requestParameters.xVAULTTOKEN !== undefined && requestParameters.xVAULTTOKEN !== null) {
            headerParameters['X-VAULT-TOKEN'] = String(requestParameters.xVAULTTOKEN);
        }

        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * list all accounts
     */
    async listallaccounts(requestParameters: ListallaccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listallaccountsRaw(requestParameters, initOverrides);
    }

}
